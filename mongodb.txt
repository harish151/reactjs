-> install mogodb
->set enviroment path in path
->check mongodb version in system cmd "mogod --version"
-> commands
    "showdbs" - used to see databases
    "use database_name" - used to create database or switch database |insert collection after create database otherwise database is not appear in dashboard.
    "db" - used to view current db
    "db.deleteDatabase()" - used to delete database.
    "db.createCollection('Collection_name')" - used to create empty collection in database
    "show collections (or) db.getCollectionNames()" - used to display all collections in database
    "db.collection_name.drop()" - used to delete a collection in database

    --insert document commands --
    "db.collection_name.insert([{},{}])" - used to create documents in collections in dictionary formate either one or many at a time
    "db.collection_name.insertOne({})" - used to create only one document at a time
            eg:-db.myCollection.insertOne({ name: "Alice", age: 30 })
    "db.collection_name.insertMany([{},{}])" - used to create many documents at a time
            eg:-db.myCollection.insertMany([{ name: "Alice", age: 30 },{ name: "Bob", age: 25 },{ name: "Charlie", age: 35 }])

    --delete document document --
    "db.collection_name.deleteOne({})" - used to delete one documents in the collection.
            eg:-if we delete document by using name.the same names are present in the document then it deletes only first obtained document. 
    "db.collection_name.deleteMany({})" - used to delete many documents in the collection.
            eg1:-db.myCollection.deleteMany({ name:"1234"})  
            eg2:-db.myCollection.deleteMany({ age: { $lt: 30 } })  
    "db.collection_name.remove({})" - it similar to deleteOne.

    --update document --
    "db.collection_name.updateOne({filter},{$set:{field1: value1, field2: value2, ... }})" - used to update one document in collection
            eg:-db.myCollection.updateOne({ name: "Alice" },{ $set: { age: 31 } })
    "db.collection_name.updateMany({filter},{ field1: value1, field2: value2, ... })" - used to update many documents in collection
            eg:-db.myCollection.updateMany({ age: { $lt: 30 } }, { $set: { status: "young" } })
    "db.collection_name.replaceOne({ filter }, { new_document })" - replace the entire one document in collection
            eg:-db.myCollection.replaceOne({ name: "Alice" }, { name: "Alice", age: 32, status: "active" } )

    --fetch document data --
    "db.collection_name.find()" - used to fetch all documents in collection
            eg1:-db.myCollection.find() //it returns all document in the collection
            eg2:-db.myCollection.find({name:"1234"}) //it fectch only document contains name 1234
            eg3:-db.myCollection.find({ age: { $gt: 30 } }, { name: 1, age: 1 })  // 1 means include the field and 0 means exclude the field
                 // from the above,it returns only name and age in documents greaterthan age 30.
    "db.collection_name.findOne({ filter })" - it returns only first document of fetch filter.
            eg:-db.myCollection.findOne({ name: "Alice" }) 
    "db.collection_name.find().limit()" - it returns only n documents entered in limit.
            eg:-db.myCollection.find().limit(2) //it returns only first two documents
    "db.myCollection.find().count()" - it returns count of documents in collection
    "db.myCollection.distinct("field")" - it returns the fields unique


    --increment operator--
    "db.collection_name.updateOne({ filter }, { $inc: { field: value } })" - used to increment value of field
            eg1:- db.users.updateOne({ name: "Alice" },{ $inc: { age: 1 } }) //it increment +1 in age
            eg2:- db.users.updateOne({ name: "Alice" },{ $inc: { age: -4 } }) //it decrement -4 in age

    --rename operator --
    "db.collection_name.updateOne({ filter },{ $rename:{oldField:"newField"} })" - used to change field name
            eg:- db.users.updateOne({ name: "Alice" },{ $rename: { address: "location" } })  // Rename "address" to "location"

    --prettyfied--
    "db.collection_name.find().pretty()" - show all documents in a collection(prettified).it means shows data clearly

    --indexing--
    "db.collection_name.createIndex({field:1})" - it creates ascending index
    "db.collection_name.createIndex({field:-1})" - it creates descending index
    "db.collection_name.dropIndex("<index_name>")" - it drops index
    "db.collection_name.getIndex()" - list all indexes

    --Aggregation($match,$group,$project,$unwind,$sort,$limit,$skip,$lookup,$addFields,$bucket,$facet,$merge)--
     "db.myCollection.aggregate([{$match:{status:"shipped"}}])" //get all records with the status shipped
     "db.myCollection.aggregate([{$group:{id:"$product",totalsales:{$sum:"$qualitity"}}}])" //groups documents by a specified field and perform operations like sumavg,count,etc
     "db.myCollection.aggregate([{$project:{_id: 0,customer: 1,totalAmount: 1,orderDate: 1}}])" // Exclude the _id field.We can use the $project stage to reshape the documents, selecting only the fields we need. For example, let's return only the customer, totalAmount, and orderDate.
     "db.myCollection.aggregate([{$unwind:"$items"}])" //We can use the $unwind stage to deconstruct the items array, so that each item in the array is processed as a separate document.

    --Transaction--
        eg (js):-
                const session = db.getMongo().startSession(); //start a session
                session.startTransaction();                   //begin a transaction
                try {
                db.orders.updateOne({ _id: 1 }, { $set: { status: "processing" } }, { session });
                db.inventory.updateOne({ productId: 1 }, { $inc: { quantity: -1 } }, { session });
                session.commitTransaction();                  //commit a transaction
                } catch (error) {
                session.abortTransaction();                   // abort a transaction
                }
                session.endSession();                         //stop a session

    --user and role management--
         eg:-    db.createUser({user: "john",pwd:"password123",roles:[{role:"readWrite",db:"testdb"}]}) //create a user
                 db.updateUser("john",{roles:[{role:"readWrite",db:"dbAdmin"}]})  //update user
                 db.dropUser("john") //drop a user
                 db.getUsers() //list out users


    --comparison operators($lt,$lte,$gt,$gte,$eq,$ne,$in,$nin)--
         eg:-    db.myCollection.find({ name:"1234",age: { $lt: 30 } })  //less than or equal
                 db.myCollection.find({ name:"1234",age: { $lte: 30 } })  //less than or equal
                 db.myCollection.find({ name:"1234",age: { $gt: 30 } })   //greater than
                 db.myCollection.find({ name:"1234",age: { $gte: 30 } })  //greater than or equal
                 db.myCollection.find({ name:"1234",age: { $eq: 30 } })   //equal
                 db.myCollection.find({ name:"1234",age: { $ne: 30 } })  //not equal
                 db.myCollection.find({age:{$in:[30,31]}})  //it return age 30,31
                 db.myCollection.find({age:{$nin:[30,31]}}) // it returns otherthan 30,31

     --logical operators($and,$or,$not,$nor)--
        eg:-     db.myCollection.find({$and:[{age:{$gt:25}},{name:"abcd"}]})
                 db.myCollection.find({$or:[{age:{$gt:25}},{{name:"abcd"}}]})
                 db.myCollection.find({age:{$not:{$gt:30}}})

     --array operators($all,$size,$elemMatch,$push,$addToSet,$pop,$pull,$each)--
        eg:-     db.myCollection.update({id:1},{$push:{hobbies:{$each:['reading','writing']}}})  //stores in array formate in hobbies
                 db.myCollection.update({id:1},{$push:{hobbies:$addToSet:{hobbies:"swimming"}}}) //stores swimming in hobbies
                 db.myCollection.update({id:1},{$pop:{hobbies:1}}) //it removes the last first ele in hobbies. when put '-1' the pop first ele
                 db.myCollection.update({id:1},{$pull:{hobbies:"coding"}}) //This will remove all occurrences of "coding" from the hobbies
                 db.myCollection.find({hobbies:{$all:["coding","swimming"]}}) //it returns whose contains the list of hobbies
                 db.myCollection.find({hobbies:{$size:3}}) //it returns whose hobbies has exactly 3.
                 db.products.find({reviews:{$elemMatch:{rating:{$gt:4},comment: /quality/i}}}) //This query will return products that have at least one review with a rating greater than 4 and a comment that mentions the word "quality" (case-insensitive).

    
